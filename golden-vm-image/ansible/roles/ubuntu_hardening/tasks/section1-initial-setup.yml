---
- name: "Disable unused filesystems."
  template:
    src: "etc/CIS-disable-fs-{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.conf"
    dest: /etc/modprobe.d/CIS.conf
    owner: root
    group: root
    mode: 0644
  when:
    - disable_unused_filesystems

- name: "Copy tmp.mount file."
  copy:
    src: "{{ tmp_mount_file[ansible_os_family] }}"
    dest: /etc/systemd/system/tmp.mount
    owner: root
    group: root
    mode: 0644
    force: true
    remote_src: true
  notify:
    - systemd restart tmp.mount
  when:
    - tmp_is_configured

- name: "Enable and start/restart tmp.mount"
  systemd:
    name: tmp.mount
    daemon_reload: true
    enabled: true
    masked: false
    state: started
  when:
    - tmp_is_configured

- name: "Ensure nodev option set on /tmp partition\n
        Ensure nosuid option set on /tmp partition"
  ini_file:
    path: "{{ item }}"
    section: Mount
    option: Options
    value: "{{ tmp_mount_options[ansible_os_family] }}"
    no_extra_spaces: true
    mode: "644"
  with_items:
    - "{{ tmp_mount_file[ansible_os_family] }}"
    - /etc/systemd/system/tmp.mount
  notify:
    - systemd restart tmp.mount
  when:
    - nodev_option_set_on_tmp_partition
    - nosuid_option_set_on_tmp_partition

- name: "Ensure /dev/shm is configured\n
        Ensure nodev option set on /dev/shm partition\n
        Ensure nosuid option set on /dev/shm partition\n
        Ensure noexec option set on /dev/shm partition"
  mount:
    name: /dev/shm
    src: tmpfs
    state: mounted
    fstype: tmpfs
    opts: "defaults,nodev,nosuid,noexec"
  when:
    - dev_shm_is_configured
    - nodev_option_set_on_dev_shm_partition
    - nosuid_option_set_on_dev_shm_partition
    - noexec_option_set_on_dev_shm_partition

- name: "Ensure separate partition exists for /var"
  shell: "set -o pipefail;
    mount | grep 'on /var '"
  register: var_mounted
  changed_when: false
  failed_when: false
  args:
    warn: false
  when:
    - separate_partition_exists_for_var


- name: "Ensure separate partition exists for /var/tmp"
  shell: "set -o pipefail;
    mount | grep 'on /var/tmp '"
  register: var_tmp_mounted
  changed_when: false
  failed_when: false
  args:
    warn: false
  when:
    - separate_partition_exists_for_var_tmp


- name: "Ensure nodev option set on /var/tmp partition\n
        Ensure nosuid option set on /var/tmp partition\n
        Ensure noexec option set on /var/tmp partition"
  mount:
    name: /var/tmp
    src: "{{ var_vartmp['source'] }}"
    state: mounted
    fstype: "{{ var_vartmp['fstype'] }}"
    opts: "{{ var_vartmp['opts'] }}"
  when:
    - var_vartmp['enabled'] == 'yes'
    - var_tmp_partition_includes_the_nodev_option
    - var_tmp_partition_includes_the_nosuid_option
    - var_tmp_partition_includes_the_noexec_option

- name: "Ensure separate partition exists for /var/log"
  shell: "set -o pipefail;
    mount | grep 'on /var/log '"
  register: var_log_mounted
  changed_when: false
  failed_when: false
  args:
    warn: false
  when:
    - separate_partition_exists_for_var_log


- name: "Ensure separate partition exists for /var/log/audit"
  shell: "set -o pipefail;
    mount | grep 'on /var/log/audit '"
  register: var_log_audit_mounted
  changed_when: false
  failed_when: false
  args:
    warn: false
  when:
    - separate_partition_exists_for_var_log_audit


- name: "Ensure separate partition exists for /home"
  shell: "set -o pipefail;
     mount | grep 'on /home '"
  register: home_mounted
  changed_when: false
  failed_when: false
  args:
    warn: false
  when:
    - separate_partition_exists_for__home


- name: "Ensure nodev option set on /home partition"
  mount:
    name: "/home"
    src: "{{ item.device }}"
    state: mounted
    fstype: "{{ item.fstype }}"
    opts: "nodev"
  when:
    - home_partition_includes_the_nodev_option
    - item.mount == "/home"
  with_items:
    - "{{ ansible_mounts }}"

- name: "Ensure sticky bit is set on all world-writable directories"
  shell: |
      set -o pipefail;
      df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d -perm -0002 2>/dev/null | xargs chmod a+t
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  when:
    - sticky_bit_is_set_on_all_world_writable_directories
    # - sticky_bit_on_worldwritable_dirs_audit.rc == '0'

- name: "Disable Automounting"
  service:
    name: autofs
    enabled: false
  when:
    - autofs_service_status.stdout == "loaded"
    - disable_automounting

- name: "Ensure AIDE is installed"
  apt:
    name:
      - aide
      - aide-common
    state: present
    install_recommends: false
  when:
    - aide_is_installed

- name: "Stat AIDE DB"
  stat: path=/var/lib/aide/aide.db
  register: aide_db
  when:
    - aide_is_installed

- name: "Init AIDE | This may take a LONG time"
  command: /usr/sbin/aideinit
  args:
    creates: /var/lib/aide/aide.db
  when:
    - var_config_aide
    - aide_is_installed
    - not aide_db.stat.exists

- name: "Ensure filesystem integrity is regularly checked"
  cron:
    name: Run AIDE integrity check weekly
    cron_file: "{{ var_aide_cron['cron_file'] }}"
    user: "{{ var_aide_cron['cron_user'] }}"
    minute: "{{ var_aide_cron['aide_minute'] | default('0') }}"
    hour: "{{ var_aide_cron['aide_hour'] | default('5') }}"
    day: "{{ var_aide_cron['aide_day'] | default('*') }}"
    month: "{{ var_aide_cron['aide_month'] | default('*') }}"
    weekday: "{{ var_aide_cron['aide_weekday'] | default('*') }}"
    job: "{{ var_aide_cron['aide_job'] }}"
  when:
    - filesystem_integrity_is_regularly_checked

- name: "Ensure permissions on bootloader config are not overridden"
  block:
    - name: "Change script /usr/sbin/grub-mkconfig to chmod 400 instead of 444"
      replace:
        path: /usr/sbin/grub-mkconfig
        regexp: 'chmod(\s+)444(\s+)\${grub_cfg}.new'
        replace: 'chmod 400 ${grub_cfg}.new'
      changed_when: false
      check_mode: false

    - name: "Remove check on password not being set to before running chmod command:"
      replace:
        path: /usr/sbin/grub-mkconfig
        regexp: '&&(\s+)!(\s+)grep(\s+)"\^password"(\s+)\${grub_cfg}.new(\s+)>/dev/null;(\s+)then'
        replace: '; then'
      changed_when: false
      check_mode: false

  when:
    - permissions_on_bootloader_config_are_not_overridden

- name: "Ensure bootloader password is set - generate password"
  shell: "set -o pipefail;
    if [ '{{ var_bootloader_password }}' == 'random' ];
    then PASSWORD=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c12); else PASSWORD='{{ var_bootloader_password }}';
    fi;
    echo -e \"$PASSWORD\n$PASSWORD\" | grub-mkpasswd-pbkdf2 | awk '/grub.pbkdf/{print$NF}'"
  register: grub_pass
  args:
    executable: /bin/bash
  when:
    - var_set_boot_pass
    - bootloader_password_is_set

- name: "Ensure bootloader password is set - generate config"
  copy:
    dest: /etc/grub.d/00_password
    content: "cat << EOF\nset superusers=\"root\"\npassword_pbkdf2 root {{ grub_pass.stdout }}\nEOF"
    owner: root
    group: root
    mode: 0755
  notify: generate new grub config
  when:
    - var_set_boot_pass and grub_pass is defined and grub_pass.stdout is defined and grub_pass.stdout | length >0
    - bootloader_password_is_set

- name: "Ensure bootloader password is set - disable password for system boot"
  replace:
    path: /etc/grub.d/10_linux
    regexp: '--class os"'
    replace: '--class os --unrestricted"'
  notify: generate new grub config
  when:
    - var_set_boot_pass
    - bootloader_password_is_set
    - disable_password

- name: "Ensure authentication required for single user mode"
  shell: "set -o pipefail;
    if [ '{{ var_root_password }}' == 'random' ];
    then PASSWORD=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c24); else PASSWORD='{{ var_root_password }}';
    fi;
    echo \"root:$PASSWORD\" | chpasswd"
  args:
    executable: /bin/bash
  when:
    - authentication_required_for_single_user_mode
    - current_root_password.stdout | length > 0

- name: "Ensure XD/NX support is enabled"
  shell: |
    set -o pipefail;
    journalctl | grep 'protection: active'
  args:
    executable: /bin/bash
  changed_when: false
  when:
    - xd_nx_support_is_enabled

- name: "Ensure address space layout randomization (ASLR) is enabled"
  sysctl:
    name: kernel.randomize_va_space
    value: "2"
    state: present
    reload: true
    sysctl_set: true
    ignoreerrors: true
  when:
    - address_space_layout_randomization_aslr_is_enabled

- name: "Ensure prelink is disabled"
  command: prelink -ua
  when:
    - prelink_installed.rc == 0
    - prelink_is_not_installed

- name: "Ensure prelink is disabled"
  apt:
    name: prelink
    state: absent
  when:
    - prelink_is_not_installed

- name: "Ensure core dumps are restricted"
  sysctl:
    name: fs.suid_dumpable
    value: "0"
    state: present
    reload: true
    sysctl_set: true
    ignoreerrors: true
  when:
    - core_dumps_are_restricted

- name: "Ensure systemd-coredump is configured"
  template:
    src: coredump.conf.j2
    dest: /etc/systemd/coredump.conf
    mode: 0644
    owner: root
    group: root
  when:
    - core_dumps_are_restricted

- name: "Ensure hard core 0 is set"
  lineinfile:
    dest: /etc/security/limits.conf
    line: '*                hard    core            0'
    regexp: '(^#)?\*\s+hard\s+core\s+[0-9]+'
    state: present
    create: true
    insertbefore: "# End of file"
    mode: "644"
  when:
    - core_dumps_are_restricted

- name: "Ensure AppArmor is installed"
  apt:
    name:
      - apparmor
      - apparmor-utils
    state: present
  when:
    - apparmor_is_installed

- name: "Ensure AppArmor is enabled in the bootloader configuration"
  block:
    - name: "Ensure AppArmor is enabled in the bootloader configuration"
      replace:
        dest: /etc/default/grub
        regexp: '^(GRUB_CMDLINE_LINUX=(?!.*apparmor)\"[^\"]*)(\".*)'
        replace: '\1 apparmor=1 security=apparmor\2'
      notify:
        - generate new grub config

    - name: "Ensure AppArmor Security is enabled in the bootloader configuration"
      replace:
        dest: /etc/default/grub
        regexp: '^(GRUB_CMDLINE_LINUX=(?!.*security)\"[^\"]*)(\".*)'
        replace: '\1 security=apparmor\2'
      notify:
        - generate new grub config
  when:
    - apparmor_is_enabled_in_the_bootloader_configuration

- name: "Ensure message of the day is configured properly."
  block:
    - name: "Ensure message of the day does not exist."
      file:
        path: /etc/motd
        state: absent
    - name: "Remove Ubuntu legal notice."
      file:
        path: /etc/legal
        state: absent
    - name: "Ensure OS details are not displayed on login."
      file:
        dest: /etc/update-motd.d/10-help-text
        owner: root
        group: root
        mode: ugo-rwx
    - name: "Ensure OS system details are not displayed on login."
      file:
        dest: /etc/update-motd.d/50-landscape-sysinfo
        owner: root
        group: root
        mode: ugo-rwx
    - name: "Ensure OS details are not displayed on login."
      file:
        dest: /etc/update-motd.d/00-header
        owner: root
        group: root
        mode: ugo-rwx
    - name: "disable ubuntu motd-news spam on login."
      lineinfile:
        state: present
        dest: /etc/default/motd-news
        regexp: '^ENABLED='
        line: 'ENABLED=0'
    - name: "disable printing previous login information on login."
      lineinfile:
        state: present
        dest: /etc/ssh/sshd_config
        regexp: '^PrintLastLog\ yes'
        line: 'PrintLastLog no'
  when:
    - message_of_the_day_is_configured_properly

- name: "Ensure local login warning banner is configured properly"
  template:
    src: etc/issue.j2
    dest: /etc/issue
    mode: "644"
  when:
    - local_login_warning_banner_is_configured_properly

- name: "Ensure remote login warning banner is configured properly"
  template:
    src: etc/issue.net.j2
    dest: /etc/issue.net
    mode: "644"
  when:
    - remote_login_warning_banner_is_configured_properly

- name: "Ensure permissions on /etc/motd are configured"
  command: /bin/true
  changed_when: false
  when:
    - permissions_on__etc_motd_are_configured


- name: "Ensure proper permissions are set on files"
  file:
    path: "{{ item.name }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  with_items:
    - "{{ var_file_permissions }}"
  when:
    - permissions_on_files

- name: "Ensure GNOME Display Manager is removed"
  apt:
    name: gdm3
    state: absent
  when:
    - gnome_display_manager_is_removed

# - name: "Ensure GDM login banner is configured"
#   lineinfile:
#     dest: "{{ item.file }}"
#     regexp: "{{ item.regexp }}"
#     line: "{{ item.line }}"
#     state: present
#     create: true
#     owner: root
#     group: root
#     mode: 0644
#   with_items:
#     - {file: '/etc/dconf/profile/gdm', regexp: 'user-db', line: 'user-db:user'}
#     - {file: '/etc/dconf/profile/gdm', regexp: 'system-db', line: 'system-db:gdm'}
#     - {file: '/etc/dconf/profile/gdm', regexp: 'file-db', line: 'file-db:/usr/share/gdm/greeter-dconf-defaults'}
#     - {file: '/etc/dconf/db/gdm.d/01-banner-message', regexp: '\[org\/gnome\/login-screen\]', line: '[org/gnome/login-screen]'}
#     - {file: '/etc/dconf/db/gdm.d/01-banner-message', regexp: 'banner-message-enable', line: 'banner-message-enable=true'}
#     - {file: '/etc/dconf/db/gdm.d/01-banner-message', regexp: 'banner-message-text', line: "banner-message-text='{{ var_warning_banner }}' "}
#   when:
#     - gdm_login_banner_is_configured

# disable_user_list_is_enabled  (Since gdm3 is removed 1.8.1 ignoring.)
# XDCMP_is_not_enabled (Since gdm3 is removed 1.8.1 ignoring.)
