---
# Preliminary tasks that should always be run
- name: "PRELIM | Run apt cache update"
  apt:
    update_cache: true
    force_apt_get: true
    autoclean: true
    autoremove: true
  changed_when: false

# Unremark below if you need to debug and see all ansible OS facts.
# - name: Print all available ansible facts of the Google image being hardened
#   ansible.builtin.debug:
#     var: ansible_facts


- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

# Unremark below if you need to debug and see all OS packages ansible finds.
# - name: Print the package facts
#   ansible.builtin.debug:
#     var: ansible_facts.packages

- name: Populate service facts
  ansible.builtin.service_facts:

# Unremark below if you need to debug and see all OS services ansible finds.
# - name: Print service facts
#   ansible.builtin.debug:
#     var: ansible_facts.services

# Unremark below if you want to find if a package is installed or not. Example auditd
- name: Check whether a package is installed
  ansible.builtin.debug:
    msg: "{{ ansible_facts.packages['auditd'] | length }} versions of auditd are installed!"
  when: "'auditd' in ansible_facts.packages"

- name: "Ensure updates, patches, and additional security software are installed"
  apt:
    update_cache: true
    upgrade: dist
    force: true
  when:
    - updates_patches_and_additional_security_software_are_installed

# - name: Install auditd
#   command: apt-get --yes install auditd

- name: "Install auditd"
  package:
    name: auditd
    state: present
    install_recommends: true

# - name: "Install audispd-plugins"
#   package:
#   name: audispd-plugins
#   state: latest
#   install_recommends: true

- name: "Reboot the GCP Instance being hardened"
  reboot:
    msg: "Reboot initiated by Ansible"
    connect_timeout: 5
    reboot_timeout: 300
    pre_reboot_delay: 5
    post_reboot_delay: 300
    test_command: uptime

- name: "PRELIM | Run apt cache update"
  apt:
    update_cache: true
    force_apt_get: true
    autoclean: true
    autoremove: true
  changed_when: false

- name: "PRELIM Configure System Accounting (auditd)"
  apt:
    name: "{{ auditd_package[ansible_os_family] }}"
    state: present
    install_recommends: false

# List users in order to look files inside each home directory
- name: "PRELIM | List users accounts"
  command: "awk -F: '{print $1}' /etc/passwd"
  register: users
  changed_when: false
  check_mode: false

- name: "PRELIM | Gather homes with wrong permissions on /home"
  shell: 'set -o pipefail;
      for dir in $(getent passwd | cut -d '':'' -f 6 | awk ''$1 ~ /^\/home\//'');
      do
        perm=$(stat -L -c "%A" "$dir" );
        if [ -d $dir ] && ([ "${perm:7:3}" != "---" ] || [ "${perm:5:1}" == "w" ] );
        then
          echo -n "$dir ";
        fi;
      done'
  args:
    executable: /bin/bash
  register: homes_with_perms
  changed_when: false
  check_mode: false

- name: "PRELIM | Gather accounts with empty password fields"
  shell: "set -o pipefail;
    cat /etc/shadow | awk -F: '($2 == \"\" ) {j++;print $1; } END {exit j}'"
  args:
    executable: /bin/bash
  register: empty_password_accounts
  changed_when: false
  check_mode: false

- name: "PRELIM | Check if root has password"
  shell: 'set -o pipefail;
       getent shadow | grep root | awk -F: ''($2 == "*" || $2 == "!" ) { printf $2; }'''
  args:
    executable: /bin/bash
  register: current_root_password
  changed_when: false
  check_mode: false

- name: "PRELIM | Gather UID 0 accounts other than root"
  shell: "set -o pipefail;
    cat /etc/passwd | awk -F: '($3 == 0 && $1 != \"root\") {i++;print $1 } END {exit i}'"
  args:
    executable: /bin/bash
  register: uid_zero_accounts_except_root
  changed_when: false
  check_mode: false

- name: "PRELIM Configure cron"
  apt:
    name: "{{ cron_package[ansible_os_family] }}"
    state: present
    install_recommends: false

- name: "PRELIM | Check if prelink package is installed"
  command: "{{ prelim_check_package_command[ansible_os_family] }} prelink"
  register: prelink_installed
  changed_when: false
  failed_when: false
  check_mode: false

- name: "PRELIM | Check if postfix package is installed"
  command: "{{ prelim_check_package_command[ansible_os_family] }} postfix"
  register: postfix_installed
  changed_when: false
  failed_when: false
  check_mode: false


# Individual service checks
- name: "PRELIM | Check for xinetd service"
  shell: "set -o pipefail;
    systemctl show xinetd | grep LoadState | cut -d = -f 2"
  args:
    executable: /bin/bash
  register: xinetd_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for openbsd-inetd service"
  shell: "set -o pipefail;
    dpkg -s openbsd-inetd | grep -o 'ok installed'; true"
  args:
    executable: /bin/bash
  register: openbsd_inetd_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for ntpd service"
  shell: "set -o pipefail;
    systemctl show {{ ntp_service[ansible_os_family] }} | grep LoadState | cut -d = -f 2"
  args:
    executable: /bin/bash
  register: ntpd_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for chronyd service"
  shell: "set -o pipefail;
    systemctl show {{ chrony_service[ansible_os_family] }} | grep LoadState | cut -d = -f 2"
  args:
    executable: /bin/bash
  register: chronyd_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for ypserv service"
  shell: "set -o pipefail;
    systemctl show nis | grep LoadState | cut -d = -f 2"
  args:
    executable: /bin/bash
  register: ypserv_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for rsh.socket service"
  shell: "set -o pipefail;
    systemctl show rsh.socket | grep LoadState | cut -d = -f 2"
  args:
    executable: /bin/bash
  register: rsh_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for rlogin.socket service"
  shell: "set -o pipefail;
    systemctl show rlogin.socket | grep LoadState | cut -d = -f 2"
  args:
    executable: /bin/bash
  register: rlogin_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for rexec.socket service"
  shell: "set -o pipefail;
    systemctl show rexec.socket | grep LoadState | cut -d = -f 2"
  args:
    executable: /bin/bash
  register: rexec_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for telnet service"
  shell: "set -o pipefail;
    systemctl show telnetd | grep LoadState | cut -d = -f 2"
  args:
    executable: /bin/bash
  register: telnet_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for tftp service"
  shell: "set -o pipefail;
    systemctl show tftpd-hpa | grep LoadState | cut -d = -f 2"
  args:
    executable: /bin/bash
  register: tftp_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for rsyncd service"
  shell: "set -o pipefail;
    systemctl show rsync | grep LoadState | cut -d = -f 2"
  args:
    executable: /bin/bash
  register: rsyncd_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for ntalk service"
  shell: "set -o pipefail;
    systemctl show ntalk | grep LoadState | cut -d = -f 2"
  args:
    executable: /bin/bash
  register: ntalk_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for autofs service"
  shell: "set -o pipefail;
    systemctl show autofs | grep LoadState | cut -d = -f 2"
  args:
    executable: /bin/bash
  register: autofs_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check the grub.cfg configuration"
  stat:
    path: /boot/grub/grub.cfg
  register: grub_cfg

- name: "PRELIM | Check the grub.conf configuration"
  stat:
    path: /boot/grub/grub.conf
  register: grub_conf

- name: "PRELIM | Check the menu.lst configuration"
  stat:
    path: "/boot/grub/menu.lst"
  register: menu_lst

- name: "PRELIM | Check that system accounts are non-login #1"
  shell: >
    set -o pipefail &&
    egrep -v "^\+" /etc/passwd | awk -F: '($1!="root" && $1!="sync" &&
    $1!="shutdown" && $1!="halt" && $3<1000 && $7!="/usr/sbin/nologin" &&
    $7!="/bin/false") {print}'
  args:
    executable: /bin/bash
  register: system_accounts_non_login_1
  changed_when: false
  check_mode: false


- name: "PRELIM | Check that system accounts are non-login #2"
  shell: >
    set -o pipefail &&
    for user in `awk -F: '($1!="root" && $3 < 1000) {print $1 }' /etc/passwd`; do
    passwd -S $user | awk -F ' ' '($2!="L") {print $1}'; done
  args:
    executable: /bin/bash
  register: system_accounts_non_login_2
  changed_when: false
  check_mode: false

- name: "PRELIM | Check that users last password change date are in the future"
  shell: |
      set -o pipefail;
      awk -F: '{print $1}' /etc/shadow | while read -r usr
      do
        if [[ $(date --date="$(chage --list "$usr" | grep '^Last password change' | cut -d: -f2)" +%s) > $(date +%s) ]];then
          echo "$usr"
        fi
      done
  args:
    executable: /bin/bash
  register: users_password_change_date_in_future
  changed_when: false
  check_mode: false
